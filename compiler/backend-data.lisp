(in-package :varjo)

(defparameter *glsl-type-sizes*
  '((:bool . 1) (:int . 1) (:uint . 1) (:float . 1)
    (:bvec2 . 1) (:bvec3 . 1) (:bvec4 . 1)
    (:uvec2 . 1) (:uvec3 . 1) (:uvec4 . 1)
    (:ivec2 . 1) (:ivec3 . 1) (:ivec4 . 1)
    (:vec2 . 1) (:vec3 . 1) (:vec4 . 1)
    (:mat2 . 2) (:mat3 . 3) (:mat4 . 4)
    (:mat2x2 . 2) (:mat2x3 . 2) (:mat2x4 . 2)
    (:mat3x2 . 3) (:mat3x3 . 3) (:mat3x4 . 3)
    (:mat4x2 . 4) (:mat4x3 . 4) (:mat4x4 . 4)))

(defparameter *glsl-component-counts*
  '((:vec2 . 2) (:vec3 . 3) (:vec4 . 4)
    (:ivec2 . 2) (:ivec3 . 3) (:ivec4 . 4)
    (:uvec2 . 2) (:uvec3 . 3) (:uvec4 . 4)
    (:mat2 . 4) (:mat3 . 9) (:mat4 . 16)
    (:mat2x2 . 4) (:mat2x3 . 6) (:mat2x4 . 8)
    (:mat3x2 . 6) (:mat3x3 . 9) (:mat3x4 . 12)
    (:mat4x2 . 8) (:mat4x3 . 12) (:mat4x4 . 16)))

(defparameter *glsl-component-type*
  '((:bvec2 . :bool)   (:bvec3 . :bool)   (:bvec4 . :bool)
    (:uvec2 . :uint)   (:uvec3 . :uint)   (:uvec4 . :uint)
    (:ivec2 . :int)    (:ivec3 . :int)    (:ivec4 . :int)
    (:vec2 . :float)   (:vec3 . :float)   (:vec4 . :float)
    (:mat2 . :float)   (:mat3 . :float)   (:mat4 . :float)
    (:mat2x2 . :float) (:mat2x3 . :float) (:mat2x4 . :float)
    (:mat3x2 . :float) (:mat3x3 . :float) (:mat3x4 . :float)
    (:mat4x2 . :float) (:mat4x3 . :float) (:mat4x4 . :float)))

;; following 3 were constant
(defparameter *shader-types*
  '(:vertex :fragment :geometry))

(defparameter -default-version- :330)

(defparameter *implicit-type-casts*
  '(((:float nil nil) (:int nil nil) (:uint nil nil))
    ((:vec2 nil nil) (:ivec2 nil nil) (:uvec2 nil nil))
    ((:vec3 nil nil) (:ivec3 nil nil) (:uvec3 nil nil))
    ((:vec4 nil nil) (:ivec4 nil nil) (:uvec4 nil nil))
    ((:mat2 nil nil) (:mat2x2 nil nil))
    ((:mat3 nil nil) (:mat3x3 nil nil))
    ((:mat4 nil nil) (:mat4x4 nil nil))))

(defparameter *types* nil)

(defparameter *struct-definitions* nil)

(defparameter *built-in-types*
  `((vgl-per-vertex-g nil nil "gl_per_vertex_g")
    (vgl-per-vertex-v nil nil "gl_per_vertex_v")
    (:none nil nil "none") (:void nil nil "void") 
    (:bool nil nil "bool") (:int nil nil "int") 
    (:uint nil nil "uint") (:float nil nil "float")
    (:double nil nil "double") (:bvec2 nil nil "bvec2") 
    (:bvec3 nil nil "bvec3") (:bvec4 nil nil "bvec4")
    (:uvec2 nil nil "uvec2") (:uvec3 nil nil "uvec3")
    (:uvec4 nil nil "uvec4") (:ivec2 nil nil "ivec2") 
    (:ivec3 nil nil "ivec3") (:ivec4 nil nil "ivec4")
    (:vec2 nil nil "vec2") (:vec3 nil nil "vec3")
    (:vec4 nil nil "vec4") (:mat2 nil nil "mat2") 
    (:mat3 nil nil "mat3") (:mat4 nil nil "mat4")
    (:mat2x2 nil nil "mat2x2") (:mat2x3 nil nil "mat2x3")
    (:mat2x4 nil nil "mat2x4") (:mat3x2 nil nil "mat3x2")
    (:mat3x3 nil nil "mat3x3") (:mat3x4 nil nil "mat3x4")
    (:mat4x2 nil nil "mat4x2") (:mat4x3 nil nil "mat4x3")
    (:mat4x4 nil nil "mat4x4") (:isampler-1D nil nil "isampler1D")
    (:isampler-1d-Array nil nil "isampler1DArray")
    (:isampler-2D nil nil "isampler2D")
    (:isampler-2d-Array nil nil "isampler2DArray")
    (:isampler-2d-MS nil nil "isampler2DMS")
    (:isampler-2d-MS-Array nil nil "isampler2DMSArray")
    (:isampler-2d-Rect nil nil "isampler2DRect")
    (:isampler-3d nil nil "isampler3d")
    (:isampler-Buffer nil nil "isamplerBuffer")
    (:isampler-Cube nil nil "isamplerCube")
    (:isampler-Cube-Array nil nil "isamplerCubeArray")
    (:sampler-1D nil nil "sampler1D")
    (:sampler-1d-Array nil nil "sampler1DArray")
    (:sampler-1d-Array-Shadow nil nil "sampler1DArrayShadow")
    (:sampler-1d-Shadow nil nil "sampler1DShadow")
    (:sampler-2D nil nil "sampler2D")
    (:sampler-2d-Array nil nil "sampler2DArray")
    (:sampler-2d-Array-Shadow nil nil "sampler2DArrayShadow")
    (:sampler-2d-MS nil nil "sampler2DMS")
    (:sampler-2d-MS-Array nil nil "sampler2DMSArray")
    (:sampler-2d-Rect nil nil "sampler2DRect")
    (:sampler-2d-Rect-Shadow nil nil "sampler2DRectShadow")
    (:sampler-2d-Shadow nil nil "sampler2DShadow")
    (:sampler-3d nil nil "sampler3d")
    (:sampler-Buffer nil nil "samplerBuffer")
    (:sampler-Cube nil nil "samplerCube")
    (:sampler-Cube-Array nil nil "samplerCubeArray")
    (:sampler-Cube-Array-Shadow nil nil "samplerCubeArrayShadow")
    (:sampler-Cube-Shadow nil nil "samplerCubeShadow")
    (:usampler-1D nil nil "usampler1D")
    (:usampler-1d-Array nil nil "usampler1DArray")
    (:usampler-2D nil nil "usampler2D")
    (:usampler-2d-Array nil nil "usampler2DArray")
    (:usampler-2d-MS nil nil "usampler2DMS")
    (:usampler-2d-MS-Array nil nil "usampler2DMSArray")
    (:usampler-2d-Rect nil nil "usampler2DRect") 
    (:usampler-3d nil nil "usampler3d")
    (:usampler-Buffer nil nil "usamplerBuffer")
    (:usampler-Cube nil nil "usamplerCube")
    (:usampler-Cube-Array nil nil "usamplerCubeArray")))

(defun expand-built-in-type (type)
  (assoc type *built-in-types*))

(defparameter *built-in-vars* 
  '((:core 
     (gl-max-clip-distances :int "gl_MaxClipDistances" t)
     (gl-max-clip-planes :int "gl_MaxClipPlanes" t)
     (gl-max-draw-Buffers :int "gl_MaxDrawBuffers" t)
     (gl-max-texture-units :int "gl_MaxTextureUnits" t)
     (gl-max-texture-coords :int "gl_MaxTextureCoords" t)
     (gl-max-geometry-texture-image-units :int 
      "gl_MaxGeometryTextureImageUnits" t)
     (gl-max-texture-image-units :int "gl_MaxTextureImageUnits" t)
     (gl-max-vertex-attribs :int "gl_MaxVertexAttribs" t)
     (gl-max-vertex-texture-image-units :int 
      "gl_MaxVertexTextureImageUnits" t)
     (gl-max-combined-texture-image-units :int 
      "gl_MaxCombinesTextureImageUnits" t)
     (gl-max-geometry-varying-components :int 
      "gl_MaxGeometryVaryingComponents" t)
     (gl-max-varying-floats :int "gl_MaxVaryingFloats" t)
     (gl-max-geometry-output-vertices :int 
      "gl_MaxGeometryOutputVertices" t)
     (gl-max-fragment-uniform-components :int 
      "gl_MaxFragmentUniformComponents" t)
     (gl-max-geometry-total-output-components :int 
      "gl_MaxGeometryTotalOutputComponents" t)
     (gl-max-geometry-uniform-components :int 
      "gl_MaxGeometryUniformComponents" t)
     (gl-max-vertex-uniform-components :int 
      "gl_MaxVertexUniformComponents" t))
    (:vertex 
     (gl-vertex-id :int "gl_VertexID" t)
     (gl-instance-id :int "gl_InstanceID" t)
     (gl-color :vec4 "gl_Color" t)
     (gl-secondary-color :vec4 "gl_SecondaryColor" t)
     (gl-normal :vec3 "gl_Normal" t)
     (gl-vertex :vec4 "gl_Vertex" t)
     (gl-multi-tex-coord-0 :vec4 "gl_MultiTexCoord0" t)
     (gl-multi-tex-coord-1 :vec4 "gl_MultiTexCoord1" t)
     (gl-multi-tex-coord-2 :vec4 "gl_MultiTexCoord2" t)
     (gl-multi-tex-coord-3 :vec4 "gl_MultiTexCoord3" t)
     (gl-multi-tex-coord-4 :vec4 "gl_MultiTexCoord4" t)
     (gl-multi-tex-coord-5 :vec4 "gl_MultiTexCoord5" t)
     (gl-multi-tex-coord-6 :vec4 "gl_MultiTexCoord6" t)
     (gl-multi-tex-coord-7 :vec4 "gl_MultiTexCoord7" t)
     (gl-fog-coord :float "gl_FogCoord" t)
     (gl-position :vec4 "gl_Position")
     (gl-point-size :float "gl_PointSize")
     (gl-clip-distance (:float t) "gl_ClipDistance")
     (gl-clip-vertex :vec4 "gl_ClipVertex")
     (gl-front-color :vec4 "gl_FrontColor")
     (gl-back-color :vec4 "gl_BackColor")
     (gl-front-secondary-color :vec4 "gl_FrontSecondaryColor")
     (gl-back-secondary-color :vec4 "gl_FrontSecondaryColor")
     (gl-tex-coord (:vec4 t) "gl_TexCoord")
     (gl-fog-frag-coord :float "gl_FogFragCoord"))
    (:fragment 
     (gl-frag-coord :vec4 "gl_FragCoord" t)
     (gl-front-facing :bool  "gl_FrontFacing" t)
     (gl-clip-distance (:float t) "gl_ClipDistance" t)
     (gl-point-coord :vec2  "gl_PointCoord" t)
     (gl-primitive-id :int "gl_PrimitiveID" t)
     (gl-frag-depth :float "gl_FragDepth" nil))
    (:geometry
     (gl-in (vgl-per-vertex-g t) "gl_in" t)
     (gl-primitive-id-in :int "gl_PrimitiveIDIn" t)
     (gl-position :vec4 "gl_Position")
     (gl-point-size :float "gl_PointSize")
     (gl-clip-distance (:float t) "gl_ClipDistance")
     (gl-primitive-id :int "gl_PrimitiveID")
     (gl-layer :int "gl_Layer"))))

(defparameter *glsl-variables* nil)
(defparameter *glsl-functions* nil)
(defparameter *glsl-special-functions* nil)
(defparameter *glsl-substitutions* nil)
(defparameter *shader-context* nil)
