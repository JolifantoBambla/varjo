;; This software is Copyright (c) 2012 Chris Bagley
;; (techsnuffle<at>gmail<dot>com)
;; Chris Bagley grants you the rights to
;; distribute and use this software as governed
;; by the terms of the Lisp Lesser GNU Public License
;; (http://opensource.franz.com/preamble.html),
;; known as the LLGPL.
(in-package :varjo)

(defmethod v-type-name ((type v-type))
  (class-name (class-of type)))

(defclass v-array (v-container) 
  ((element-type :initform nil :initarg :element-type :reader v-element-type)
   (dimensions :initform nil :initarg :dimensions :reader v-dimensions)))

(defun type-spec->type (spec)  
  (if (symbolp spec)
      (make-instance (if (keywordp spec) (symb 'v- spec) spec))
      (destructuring-bind (type dimensions) spec
        (make-instance 'v-array :element-type (if (keywordp spec) 
                                                  (symb 'v- type)
                                                  type)
                       :dimensions dimensions))))

(defmethod v-glsl-size ((type t))
  (slot-value type 'glsl-size))

(defmethod v-glsl-size ((type v-array))
  (* (apply #'* (v-dimensions type)) 
     (slot-value (v-element-type type) 'glsl-size)))

(defmethod v-casts-to-p ((from-type v-type) (to-type v-type))
  (or (typep from-type to-type)      
      (when (slot-exists-p from-type 'casts-to)
        (loop :for cast :in (slot-value from-type 'casts-to) :thereis
           (typep (type-spec->type cast) to-type)))))

(defmethod v-casts-to-p ((from-type symbol) (to-type symbol))
  (v-casts-to-p (type-spec->type from-type) to-type))

(defun find-mutual-cast-type (&rest types)
  (let ((casts (loop :for type :in types :collect 
                  (if (symbolp type) 
                      (cons type (slot-value (make-instance type) 'casts-to)) 
                      (cons (v-type-name type) 
                            (slot-value type 'casts-to))))))
    (destructuring-bind (mutual-casts . other-cast-lists) casts
      (loop :for casts :in other-cast-lists :do
         (setf mutual-casts (intersection mutual-casts casts)))
      (first (sort mutual-casts #'v-superior)))))

(let ((order-or-superiority '(v-double v-float v-int v-uint v-vec2 v-ivec2 
                              v-uvec2 v-vec3 v-ivec3 v-uvec3 v-vec4 v-ivec4
                              v-uvec4 v-mat2 v-mat2x2 v-mat3 v-mat3x3 v-mat4
                              v-mat4x4)))
  (defun v-superior (x y) 
    (< (or (position x order-or-superiority) -1)
       (or (position y order-or-superiority) -1))))

(defun v-superior-type (&rest types)
  (first (sort types #'v-superior)))

(defclass v-none () ())

(defclass v-stream (v-type) ())

(defclass v-function (v-type)
  ((restriction :initform nil :initarg :restriction :accessor v-restriction)
   (argument-spec :initform nil :initarg :arg-spec :accessor v-argument-spec)
   (code :initform nil :initarg :code :accessor v-code)
   (glsl-string :initform "" :initarg :glsl-string :reader v-glsl-string)
   (return-spec :initform nil :initarg :return-spec :accessor v-return-spec)
   (place :initform nil :initarg :place :accessor v-placep)
   (glsl-spec-matching :initform nil :initarg :glsl-spec-matching :reader v-glsl-spec-matchingp)))

(defclass v-struct (v-type)
  ((restriction :initform nil :initarg :restriction :accessor v-restriction)
   (glsl-string :initform "" :initarg :glsl-string :reader v-glsl-string)
   (slots :initform nil :initarg :slots :reader v-slots)))

(defgeneric v-special-functionp (func))
(defmethod v-special-functionp ((func function))
  (eq :special (v-glsl-string func)))

(defclass v-tfd () ())
(defclass v-tf (v-tfd) ()) ;; floav-t vec*
(defclass v-td (v-tfd) ()) ;; double dvec*
(defclass v-tb () ()) ;; bool bvec*
(defclass v-tiu () ())
(defclass v-ti (v-tiu) ()) ;; int ivec*
(defclass v-tu (v-tiu) ()) ;; uint uvec*
(defclass v-tvec () ()) ;;vec* uvec* ivec* [notice no dvec]

(defclass v-void () 
  ((core :initform t :reader core-typep)
   (glsl-string :initform "" :reader v-glsl-string)))

(defclass v-bool (v-type) 
  ((core :initform t :reader core-typep)
   (glsl-string :initform "bool" :reader v-glsl-string)))

(defclass v-number (v-type) ())
(defclass v-int (v-number)
  ((core :initform t :reader core-typep)
   (glsl-string :initform "int" :reader v-glsl-string)
   (casts-to :initform '(v-uint v-float v-double))))
(defclass v-uint (v-number)
  ((core :initform t :reader core-typep)
   (glsl-string :initform "uint" :reader v-glsl-string)
   (casts-to :initform '(v-float v-double))))
(defclass v-float (v-number)
  ((core :initform t :reader core-typep)
   (glsl-string :initform "float" :reader v-glsl-string)
   (casts-to :initform '(v-double))))
(defclass v-short-float (v-number) 
  ((core :initform t :reader core-typep)
   (glsl-string :initform "short-float" :reader v-glsl-string)))
(defclass v-double (v-number) 
  ((core :initform t :reader core-typep)
   (glsl-string :initform "double" :reader v-glsl-string)))

(defclass v-container (v-type)
  ((element-type :initform nil :reader v-element-type)
   (dimensions :initform nil :reader v-dimensions)))

(defclass v-matrix (v-container) ())
(defclass v-mat2 (v-matrix) 
  ((core :initform t :reader core-typep)
   (glsl-string :initform "mat2" :reader v-glsl-string)
   (element-type :initform 'v-float :reader v-element-type)
   (dimensions :initform '(2 2) :reader v-dimensions)
   (glsl-size :initform 2)
   (casts-to :initform '(v-dmat2))))
(defclass v-mat3 (v-matrix)
  ((core :initform t :reader core-typep)
   (glsl-string :initform "mat3" :reader v-glsl-string)
   (element-type :initform 'v-float :reader v-element-type)
   (dimensions :initform '(3 3) :reader v-dimensions)
   (glsl-size :initform 3)
   (casts-to :initform '(v-dmat3))))
(defclass v-mat4 (v-matrix)
  ((core :initform t :reader core-typep)
   (glsl-string :initform "mat4" :reader v-glsl-string)
   (element-type :initform 'v-float :reader v-element-type)
   (dimensions :initform '(4 4) :reader v-dimensions)
   (glsl-size :initform 4)
   (casts-to :initform '(v-dmat4))))
(defclass V-MAT2X2 (v-matrix)
  ((core :initform T :reader core-typep)
   (glsl-string :initform "mat2x2" :reader V-glsl-string)
   (element-type :initform 'V-FLOAT :reader V-element-type)
   (dimensions :initform '(2 2) :reader v-dimensions)
   (glsl-size :initform 2)))
(defclass V-MAT2X3 (v-matrix)
  ((core :initform T :reader core-typep)
   (glsl-string :initform "mat2x3" :reader V-glsl-string)
   (element-type :initform 'V-FLOAT :reader V-element-type)
   (dimensions :initform '(2 3) :reader v-dimensions)
   (glsl-size :initform 2)
   (casts-to :initform '(v-dmat2x3))))
(defclass V-MAT2X4 (v-matrix)
  ((core :initform T :reader core-typep)
   (glsl-string :initform "mat2x4" :reader V-glsl-string)
   (element-type :initform 'V-FLOAT :reader V-element-type)
   (dimensions :initform '(2 4) :reader v-dimensions)
   (glsl-size :initform 2)
   (casts-to :initform '(v-dmat2x4))))
(defclass V-MAT3X2 (v-matrix)
  ((core :initform T :reader core-typep)
   (glsl-string :initform "mat3x2" :reader V-glsl-string)
   (element-type :initform 'V-FLOAT :reader V-element-type)
   (dimensions :initform '(3 2) :reader v-dimensions)
   (glsl-size :initform 3)
   (casts-to :initform '(v-dmat3x2))))
(defclass V-MAT3X3 (v-matrix)
  ((core :initform T :reader core-typep)
   (glsl-string :initform "mat3x3" :reader V-glsl-string)
   (element-type :initform 'V-FLOAT :reader V-element-type)
   (dimensions :initform '(3 3) :reader v-dimensions)
   (glsl-size :initform 3)))
(defclass V-MAT3X4 (v-matrix)
  ((core :initform T :reader core-typep)
   (glsl-string :initform "mat3x4" :reader V-glsl-string)
   (element-type :initform 'V-FLOAT :reader V-element-type)
   (dimensions :initform '(3 4) :reader v-dimensions)
   (glsl-size :initform 3)
   (casts-to :initform '(v-dmat3x4))))
(defclass V-MAT4X2 (v-matrix)
  ((core :initform T :reader core-typep)
   (glsl-string :initform "mat4x2" :reader V-glsl-string)
   (element-type :initform 'V-FLOAT :reader V-element-type)
   (dimensions :initform '(4 2) :reader v-dimensions)
   (glsl-size :initform 4)
   (casts-to :initform '(v-dmat4x2))))
(defclass V-MAT4X3 (v-matrix)
  ((core :initform T :reader core-typep)
   (glsl-string :initform "mat4x3" :reader V-glsl-string)
   (element-type :initform 'V-FLOAT :reader V-element-type)
   (dimensions :initform '(4 3) :reader v-dimensions)
   (glsl-size :initform 4)
   (casts-to :initform '(v-dmat4x3))))
(defclass V-MAT4X4 (v-matrix)
  ((core :initform T :reader core-typep)
   (glsl-string :initform "mat4x4" :reader V-glsl-string)
   (element-type :initform 'V-FLOAT :reader V-element-type)
   (dimensions :initform '(4 4) :reader v-dimensions)
   (glsl-size :initform 4)))

(defclass v-vector (v-container) ())
(defclass v-fvector (v-vector) ())

(defclass v-vec2 (v-fvector) 
  ((core :initform t :reader core-typep)
   (glsl-string :initform "vec2" :reader v-glsl-string)
   (element-type :initform 'v-float :reader v-element-type)
   (dimensions :initform '(2) :reader v-dimensions)
   (casts-to :initform '(v-dvec2))))
(defclass v-vec3 (v-fvector) 
  ((core :initform t :reader core-typep)
   (glsl-string :initform "vec3" :reader v-glsl-string)
   (element-type :initform 'v-float :reader v-element-type)
   (dimensions :initform '(3) :reader v-dimensions)
   (casts-to :initform '(v-dvec3))))
(defclass v-vec4 (v-fvector)
  ((core :initform t :reader core-typep)
   (glsl-string :initform "vec4" :reader v-glsl-string)
   (element-type :initform 'v-float :reader v-element-type)
   (dimensions :initform '(4) :reader v-dimensions)
   (casts-to :initform '(v-dvec4))))

(defclass v-bvector (v-vector) ())
(defclass v-bvec2 (v-bvector) 
  ((core :initform t :reader core-typep)
   (glsl-string :initform "bvec2" :reader v-glsl-string)
   (element-type :initform 'v-bool :reader v-element-type)
   (dimensions :initform '(2) :reader v-dimensions)))
(defclass v-bvec3 (v-bvector)
  ((core :initform t :reader core-typep)
   (glsl-string :initform "bvec3" :reader v-glsl-string)
   (element-type :initform 'v-bool :reader v-element-type)
   (dimensions :initform '(3) :reader v-dimensions)))
(defclass v-bvec4 (v-bvector) 
  ((core :initform t :reader core-typep)
   (glsl-string :initform "bvec4" :reader v-glsl-string)
   (element-type :initform 'v-bool :reader v-element-type)
   (dimensions :initform '(4) :reader v-dimensions)))

(defclass v-uvector (v-vector) ())
(defclass v-uvec2 (v-uvector)
  ((core :initform t :reader core-typep)
   (glsl-string :initform "uvec2" :reader v-glsl-string)
   (element-type :initform 'v-uint :reader v-element-type)
   (dimensions :initform '(2) :reader v-dimensions)
   (casts-to :initform '(v-dvec2 v-vec2))))
(defclass v-uvec3 (v-uvector)
  ((core :initform t :reader core-typep)
   (glsl-string :initform "uvec3" :reader v-glsl-string)
   (element-type :initform 'v-uint :reader v-element-type)
   (dimensions :initform '(3) :reader v-dimensions)
   (casts-to :initform '(v-dvec3 v-vec3))))
(defclass v-uvec4 (v-uvector) 
  ((core :initform t :reader core-typep)
   (glsl-string :initform "uvec4" :reader v-glsl-string)
   (element-type :initform 'v-uint :reader v-element-type)
   (dimensions :initform '(4) :reader v-dimensions)
   (casts-to :initform '(v-dvec4 v-vec4))))

(defclass v-ivector (v-vector) ())
(defclass v-ivec2 (v-ivector) 
  ((core :initform t :reader core-typep)
   (glsl-string :initform "ivec2" :reader v-glsl-string)
   (element-type :initform 'v-int :reader v-element-type)
   (dimensions :initform '(2) :reader v-dimensions)
   (casts-to :initform '(v-uvec2 v-vec2 v-dvec2))))
(defclass v-ivec3 (v-ivector) 
  ((core :initform t :reader core-typep)
   (glsl-string :initform "ivec3" :reader v-glsl-string)
   (element-type :initform 'v-int :reader v-element-type)
   (dimensions :initform '(3) :reader v-dimensions)
   (casts-to :initform '(v-uvec3 v-vec3 v-dvec3))))
(defclass v-ivec4 (v-ivector) 
  ((core :initform t :reader core-typep)
   (glsl-string :initform "ivec4" :reader v-glsl-string)
   (element-type :initform 'v-int :reader v-element-type)
   (dimensions :initform '(4) :reader v-dimensions)
   (casts-to :initform '(v-uvec4 v-vec4 v-dvec4))))

(defclass v-dvector (v-vector) ())
(defclass v-dvec2 (v-dvector) 
  ((core :initform t :reader core-typep)
   (glsl-string :initform "ivec2" :reader v-glsl-string)
   (element-type :initform 'v-dnt :reader v-element-type)
   (dimensions :initform '(2) :reader v-dimensions)
   (casts-to :initform '(v-uvec2 v-vec2 v-dvec2))))
(defclass v-dvec3 (v-dvector) 
  ((core :initform t :reader core-typep)
   (glsl-string :initform "ivec3" :reader v-glsl-string)
   (element-type :initform 'v-dnt :reader v-element-type)
   (dimensions :initform '(3) :reader v-dimensions)
   (casts-to :initform '(v-uvec3 v-vec3 v-dvec3))))
(defclass v-dvec4 (v-dvector) 
  ((core :initform t :reader core-typep)
   (glsl-string :initform "ivec4" :reader v-glsl-string)
   (element-type :initform 'v-dnt :reader v-element-type)
   (dimensions :initform '(4) :reader v-dimensions)
   (casts-to :initform '(v-uvec4 v-vec4 v-dvec4))))

(defclass v-sampler (v-type) ())
(defclass V-ISAMPLER-1D (v-sampler)
  ((core :initform T :reader core-typep)
   (glsl-string :initform "isampler-1D" :reader V-glsl-string)
   (element-type :initform 'V-VEC4 :reader V-element-type)))
(defclass V-ISAMPLER-1D-ARRAY (v-sampler)
  ((core :initform T :reader core-typep)
   (glsl-string :initform "isampler-1d-Array" :reader V-glsl-string)
   (element-type :initform 'V-VEC4 :reader V-element-type)))
(defclass V-ISAMPLER-2D (v-sampler)
  ((core :initform T :reader core-typep)
   (glsl-string :initform "isampler-2D" :reader V-glsl-string)
   (element-type :initform 'V-VEC4 :reader V-element-type)))
(defclass V-ISAMPLER-2D-ARRAY (v-sampler)
  ((core :initform T :reader core-typep)
   (glsl-string :initform "isampler-2d-Array" :reader V-glsl-string)
   (element-type :initform 'V-VEC4 :reader V-element-type)))
(defclass V-ISAMPLER-2D-MS (v-sampler)
  ((core :initform T :reader core-typep)
   (glsl-string :initform "isampler-2d-MS" :reader V-glsl-string)
   (element-type :initform 'V-VEC4 :reader V-element-type)))
(defclass V-ISAMPLER-2D-MS-ARRAY (v-sampler)
  ((core :initform T :reader core-typep)
   (glsl-string :initform "isampler-2d-MS-Array" :reader V-glsl-string)
   (element-type :initform 'V-VEC4 :reader V-element-type)))
(defclass V-ISAMPLER-2D-RECT (v-sampler)
  ((core :initform T :reader core-typep)
   (glsl-string :initform "isampler-2d-Rect" :reader V-glsl-string)
   (element-type :initform 'V-VEC4 :reader V-element-type)))
(defclass V-ISAMPLER-3D (v-sampler)
  ((core :initform T :reader core-typep)
   (glsl-string :initform "isampler-3d" :reader V-glsl-string)
   (element-type :initform 'V-VEC4 :reader V-element-type)))
(defclass V-ISAMPLER-BUFFER (v-sampler)
  ((core :initform T :reader core-typep)
   (glsl-string :initform "isampler-Buffer" :reader V-glsl-string)
   (element-type :initform 'V-VEC4 :reader V-element-type)))
(defclass V-ISAMPLER-CUBE (v-sampler)
  ((core :initform T :reader core-typep)
   (glsl-string :initform "isampler-Cube" :reader V-glsl-string)
   (element-type :initform 'V-VEC4 :reader V-element-type)))
(defclass V-ISAMPLER-CUBE-ARRAY (v-sampler)
  ((core :initform T :reader core-typep)
   (glsl-string :initform "isampler-Cube-Array" :reader V-glsl-string)
   (element-type :initform 'V-VEC4 :reader V-element-type)))
(defclass v-sampler-1D (v-sampler)
  ((core :initform T :reader core-typep)
   (glsl-string :initform "sampler-1D" :reader V-glsl-string)
   (element-type :initform 'V-VEC4 :reader V-element-type)))
(defclass v-sampler-1D-ARRAY (v-sampler)
  ((core :initform T :reader core-typep)
   (glsl-string :initform "sampler-1d-Array" :reader V-glsl-string)
   (element-type :initform 'V-VEC4 :reader V-element-type)))
(defclass v-sampler-1D-ARRAY-SHADOW (v-sampler)
  ((core :initform T :reader core-typep)
   (glsl-string :initform "sampler-1d-Array-Shadow" :reader
                glsl-string)
   (element-type :initform 'V-VEC4 :reader V-element-type)))
(defclass v-sampler-1D-SHADOW (v-sampler)
  ((core :initform T :reader core-typep)
   (glsl-string :initform "sampler-1d-Shadow" :reader V-glsl-string)
   (element-type :initform 'V-VEC4 :reader V-element-type)))
(defclass v-sampler-2D (v-sampler)
  ((core :initform T :reader core-typep)
   (glsl-string :initform "sampler-2D" :reader V-glsl-string)
   (element-type :initform 'V-VEC4 :reader V-element-type)))
(defclass v-sampler-2D-ARRAY (v-sampler)
  ((core :initform T :reader core-typep)
   (glsl-string :initform "sampler-2d-Array" :reader V-glsl-string)
   (element-type :initform 'V-VEC4 :reader V-element-type)))
(defclass v-sampler-2D-ARRAY-SHADOW (v-sampler)
  ((core :initform T :reader core-typep)
   (glsl-string :initform "sampler-2d-Array-Shadow" :reader
                glsl-string)
   (element-type :initform 'V-VEC4 :reader V-element-type)))
(defclass v-sampler-2D-MS (v-sampler)
  ((core :initform T :reader core-typep)
   (glsl-string :initform "sampler-2d-MS" :reader V-glsl-string)
   (element-type :initform 'V-VEC4 :reader V-element-type)))
(defclass v-sampler-2D-MS-ARRAY (v-sampler)
  ((core :initform T :reader core-typep)
   (glsl-string :initform "sampler-2d-MS-Array" :reader V-glsl-string)
   (element-type :initform 'V-VEC4 :reader V-element-type)))
(defclass v-sampler-2D-RECT (v-sampler)
  ((core :initform T :reader core-typep)
   (glsl-string :initform "sampler-2d-Rect" :reader V-glsl-string)
   (element-type :initform 'V-VEC4 :reader V-element-type)))
(defclass v-sampler-2D-RECT-SHADOW (v-sampler)
  ((core :initform T :reader core-typep)
   (glsl-string :initform "sampler-2d-Rect-Shadow" :reader
                glsl-string)
   (element-type :initform 'V-VEC4 :reader V-element-type)))
(defclass v-sampler-2D-SHADOW (v-sampler)
  ((core :initform T :reader core-typep)
   (glsl-string :initform "sampler-2d-Shadow" :reader V-glsl-string)
   (element-type :initform 'V-VEC4 :reader V-element-type)))
(defclass v-sampler-3D (v-sampler)
  ((core :initform T :reader core-typep)
   (glsl-string :initform "sampler-3d" :reader V-glsl-string)
   (element-type :initform 'V-VEC4 :reader V-element-type)))
(defclass v-sampler-BUFFER (v-sampler)
  ((core :initform T :reader core-typep)
   (glsl-string :initform "sampler-Buffer" :reader V-glsl-string)
   (element-type :initform 'V-VEC4 :reader V-element-type)))
(defclass v-sampler-CUBE (v-sampler)
  ((core :initform T :reader core-typep)
   (glsl-string :initform "sampler-Cube" :reader V-glsl-string)
   (element-type :initform 'V-VEC4 :reader V-element-type)))
(defclass v-sampler-CUBE-ARRAY (v-sampler)
  ((core :initform T :reader core-typep)
   (glsl-string :initform "sampler-Cube-Array" :reader V-glsl-string)
   (element-type :initform 'V-VEC4 :reader V-element-type)))
(defclass v-sampler-CUBE-ARRAY-SHADOW (v-sampler)
  ((core :initform T :reader core-typep)
   (glsl-string :initform "sampler-Cube-Array-Shadow" :reader
                glsl-string)
   (element-type :initform 'V-VEC4 :reader V-element-type)))
(defclass v-sampler-CUBE-SHADOW (v-sampler)
  ((core :initform T :reader core-typep)
   (glsl-string :initform "sampler-Cube-Shadow" :reader V-glsl-string)
   (element-type :initform 'V-VEC4 :reader V-element-type)))
(defclass V-USAMPLER-1D (v-sampler)
  ((core :initform T :reader core-typep)
   (glsl-string :initform "usampler-1D" :reader V-glsl-string)
   (element-type :initform 'V-VEC4 :reader V-element-type)))
(defclass V-USAMPLER-1D-ARRAY (v-sampler)
  ((core :initform T :reader core-typep)
   (glsl-string :initform "usampler-1d-Array" :reader V-glsl-string)
   (element-type :initform 'V-VEC4 :reader V-element-type)))
(defclass V-USAMPLER-2D (v-sampler)
  ((core :initform T :reader core-typep)
   (glsl-string :initform "usampler-2D" :reader V-glsl-string)
   (element-type :initform 'V-VEC4 :reader V-element-type)))
(defclass V-USAMPLER-2D-ARRAY (v-sampler)
  ((core :initform T :reader core-typep)
   (glsl-string :initform "usampler-2d-Array" :reader V-glsl-string)
   (element-type :initform 'V-VEC4 :reader V-element-type)))
(defclass V-USAMPLER-2D-MS (v-sampler)
  ((core :initform T :reader core-typep)
   (glsl-string :initform "usampler-2d-MS" :reader V-glsl-string)
   (element-type :initform 'V-VEC4 :reader V-element-type)))
(defclass V-USAMPLER-2D-MS-ARRAY (v-sampler)
  ((core :initform T :reader core-typep)
   (glsl-string :initform "usampler-2d-MS-Array" :reader V-glsl-string)
   (element-type :initform 'V-VEC4 :reader V-element-type)))
(defclass V-USAMPLER-2D-RECT (v-sampler)
  ((core :initform T :reader core-typep)
   (glsl-string :initform "usampler-2d-Rect" :reader V-glsl-string)
   (element-type :initform 'V-VEC4 :reader V-element-type)))
(defclass V-USAMPLER-3D (v-sampler)
  ((core :initform T :reader core-typep)
   (glsl-string :initform "usampler-3d" :reader V-glsl-string)
   (element-type :initform 'V-VEC4 :reader V-element-type)))
(defclass V-USAMPLER-BUFFER (v-sampler)
  ((core :initform T :reader core-typep)
   (glsl-string :initform "usampler-Buffer" :reader V-glsl-string)
   (element-type :initform 'V-VEC4 :reader V-element-type)))
(defclass V-USAMPLER-CUBE (v-sampler)
  ((core :initform T :reader core-typep)
   (glsl-string :initform "usampler-Cube" :reader V-glsl-string)
   (element-type :initform 'V-VEC4 :reader V-element-type)))
(defclass V-USAMPLER-CUBE-ARRAY (v-sampler)
  ((core :initform T :reader core-typep)
   (glsl-string :initform "usampler-Cube-Array" :reader V-glsl-string)
   (element-type :initform 'V-VEC4 :reader V-element-type)))

;;----------v-v-v-old-v-v-v-----------;
;; [TODO] why only first 2?
;; (defun type-equal (a b)
;;   (equal (subseq a 0 2) (subseq b 0 2)))

