((:name '%void :in-args nil :output-type :void :transform "" :context-restriction nil)
 (:name 'f-transform :in-args nil :output-type :vec4 :transform "ftransform()" :context-restriction '((:330)))
 (:name 'discard :in-args nil :output-type :none :transform "discard()" :context-restriction '(:fragment))
 (:name 'break :in-args nil :output-type :none :transform "break" :context-restriction '((:330)))
 (:name 'continue :in-args nil :output-type :none :transform "continue" :context-restriction '((:330)))
 (:name 'emit-vertex :in-args nil :output-type :void :transform "EmitVertex()" :context-restriction '(:geometry))
 (:name 'end-primitive :in-args nil :output-type :void :transform "EndPrimitive()" :context-restriction '(:geometry))
 (:name 'x :in-args '((vec 'v-vector) :output-type '(:element 0) :transform "~a.x" :context-restriction '((:330))))
 (:name 'y :in-args '((vec 'v-vector) :output-type :bool :transform "~a.y" :context-restriction '((:330))))
 (:name 'z :in-args '((vec 'v-vec3-up)) :output-type :bool :transform "~a.z" :context-restriction '((:330)))
 (:name 'w :in-args '((vec 'v-vec4-up)) :output-type :bool :transform "~a.w" :context-restriction '((:330)))
 (:name 'bool :in-args '((x ((:double :float :int :uint :bool :bvec2 :bvec3 :bvec4)))) :output-type :bool :transform "bool(~a)" :context-restriction '((:330)))
 (:name 'double :in-args '((x ((:bool :float :int :uint :double)))) :output-type :double :transform "double(~a)" :context-restriction '((:330)))
 (:name 'float :in-args '((x ((:bool :double :int :uint :float :vec2 :vec3 :vec4)))) :output-type :float :transform "float(~a)" :context-restriction '((:330)))
 (:name 'int :in-args '((x ((:bool :double :float :uint :int :ivec2 :ivec3 :ivec4)))) :output-type :int :transform "int(~a)" :context-restriction '((:330)))
 (:name 'uint :in-args '((x ((:bool :double :float :int :uint :uvec2 :uvec3 :uvec4)))) :output-type :uint :transform "uint(~a)" :context-restriction '((:330)))
 (:name 'uint :in-args '((x ((:bool :double :float :int :uint :uvec2 :uvec3 :uvec4)))) :output-type :uint :transform "uint(~a)" :context-restriction '((:330)))
 (:name 'degrees :in-args '((radians 'all-floats)) :output-type '(0 nil) :transform "degrees(~a)" :context-restriction '((:330)))
 (:name 'radians :in-args '((degrees 'all-floats)) :output-type '(0 nil) :transform "radians(~a)" :context-restriction '((:330)))
 (:name 'sin :in-args '((angle 'all-floats)) :output-type '(0 nil) :transform "sin(~a)" :context-restriction '((:330)))
 (:name 'cos :in-args '((angle 'all-floats)) :output-type '(0 nil) :transform "cos(~a)" :context-restriction '((:330)))
 (:name 'tan :in-args '((angle 'all-floats)) :output-type '(0 nil) :transform "tan(~a)" :context-restriction '((:330)))
 (:name 'asin :in-args '((x 'all-floats)) :output-type '(0 nil) :transform "asin(~a)" :context-restriction '((:330)))
 (:name 'acos :in-args '((x 'all-floats)) :output-type '(0 nil) :transform "acos(~a)" :context-restriction '((:330)))
 (:name 'atan :in-args '((y 'all-floats :compatible) (x 'all-floats :compatible)) :output-type '(0 nil) :transform "atan(~a, ~a)" :context-restriction '((:330)))
 (:name 'atan :in-args '((y-over-x 'all-floats)) :output-type '(0 nil) :transform "atan(~a)" :context-restriction '((:330)))
 (:name 'sinh :in-args '((angle 'all-floats)) :output-type '(0 nil) :transform "sinh(~a)" :context-restriction '((:330)))
 (:name 'cosh :in-args '((angle 'all-floats)) :output-type '(0 nil) :transform "cosh(~a)" :context-restriction '((:330)))
 (:name 'tanh :in-args '((angle 'all-floats)) :output-type '(0 nil) :transform "tanh(~a)" :context-restriction '((:330)))
 (:name 'asinh :in-args '((angle 'all-floats)) :output-type '(0 nil) :transform "asinh(~a)" :context-restriction '((:330)))
 (:name 'acosh :in-args '((angle 'all-floats)) :output-type '(0 nil) :transform "acosh(~a)" :context-restriction '((:330)))
 (:name 'atanh :in-args '((angle 'all-floats)) :output-type '(0 nil) :transform "atanh(~a)" :context-restriction '((:330)))
 (:name 'exp :in-args '((x 'all-floats)) :output-type '(0 nil) :transform "exp(~a)" :context-restriction '((:330)))
 (:name 'log :in-args '((x 'all-floats)) :output-type '(0 nil) :transform "log(~a)" :context-restriction '((:330)))
 (:name 'exp2 :in-args '((x 'all-floats)) :output-type '(0 nil) :transform "exp2(~a)" :context-restriction '((:330)))
 (:name 'log2 :in-args '((x 'all-floats)) :output-type '(0 nil) :transform "log2(~a)" :context-restriction '((:330)))
 (:name 'sqrt :in-args '((x 'all-floats)) :output-type '(0 nil) :transform "exp(~a)" :context-restriction '((:330)))
 (:name 'inversesqrt :in-args '((x 'all-floats)) :output-type '(0 nil) :transform "inversesqrt(~a)" :context-restriction '((:330)))
 (:name 'abs :in-args '((x 'all-floats-and-ints)) :output-type '(0 nil) :transform "abs(~a)" :context-restriction '((:330)))
 (:name 'sign :in-args '((x 'all-floats-and-ints)) :output-type '(:float nil) :transform "sign(~a)" :context-restriction '((:330)))
 (:name 'floor :in-args '((x 'all-floats)) :output-type '(:int nil) :transform "floor(~a)" :context-restriction '((:330)))
 (:name 'trunc :in-args '((x 'all-floats)) :output-type '(:int nil) :transform "trunc(~a)" :context-restriction '((:330)))
 (:name 'round :in-args '((x 'all-floats)) :output-type '(:int nil) :transform "round(~a)" :context-restriction '((:330)))
 (:name 'round-even :in-args '((x 'all-floats)) :output-type '(:int nil) :transform "roundEven(~a)" :context-restriction '((:330)))
 (:name 'ceil :in-args '((x 'all-floats)) :output-type '(:int nil) :transform "ceil(~a)" :context-restriction '((:330)))
 (:name 'fract :in-args '((x 'all-floats)) :output-type '(0 nil) :transform "fract(~a)" :context-restriction '((:330)))
 (:name 'is-nan :in-args '((x :float)) :output-type '(:bool nil) :transform "isnan(~a, ~a, ~a)" :context-restriction '((:330)))
 (:name 'is-nan :in-args '((x :vec2)) :output-type '(:bvec2 nil) :transform "isnan(~a, ~a, ~a)" :context-restriction '((:330)))
 (:name 'is-nan :in-args '((x :vec3)) :output-type '(:bvec3 nil) :transform "isnan(~a, ~a, ~a)" :context-restriction '((:330)))
 (:name 'is-nan :in-args '((x :vec4)) :output-type '(:bvec4 nil) :transform "isnan(~a, ~a, ~a)" :context-restriction '((:330)))
 (:name 'length :in-args '((x 'all-floats)) :output-type :float :transform "length(~a)" :context-restriction '((:330)))
 (:name 'normalize :in-args '((x 'all-floats)) :output-type '(0 nil) :transform "normalize(~a)" :context-restriction '((:330)))
 (:name 'transpose :in-args '((m 'v-square)) :output-type 0 :transform "transpose(~a)" :context-restriction '((:330)))
 (:name 'transpose :in-args '((m :mat2x3)) :output-type :mat3x2 :transform "transpose(~a)") (:name 'transpose :in-args '((m ((:mat2x4)))) :output-type :mat4x2 :transform "transpose(~a)" :context-restriction '((:330)))
 (:name 'transpose :in-args '((m :mat3x2)) :output-type :mat2x3  :transform "transpose(~a)") (:name 'transpose :in-args '((m ((:mat3x4)))) :output-type :mat4x3 :transform "transpose(~a)" :context-restriction '((:330)))
 (:name 'transpose :in-args '((m :mat4x3)) :output-type :mat3x4  :transform "transpose(~a)") (:name 'transpose :in-args '((m :mat4x2)) :output-type :mat2x4  :transform "transpose(~a)" :context-restriction '((:330)))
 (:name 'determinant :in-args '((m 'v-matrix)) :output-type :float :transform "determinant(~a)" :context-restriction '((:330)))
 (:name 'inverse :in-args '((m 'v-square)) :output-type 0 :transform "inverse(~a)" :context-restriction '((:330)))
 (:name 'b-any :in-args '((x 'v-bvector) :output-type :bool :transform "any(~a)" :context-restriction '((:330))))
 (:name 'b-not :in-args '((x 'v-bvector) :output-type 0 :transform "not(~a)" :context-restriction '((:330))))
 (:name 'dfdx :in-args '((i 'all-floats)) :output-type 0 :transform "dFdx(~a)" :context-restriction '(:fragment))
 (:name 'dfdy :in-args '((i 'all-floats)) :output-type 0 :transform "dFdy(~a)" :context-restriction '(:fragment))
 (:name 'f-width :in-args '((i 'all-floats)) :output-type 0 :transform "fwidth(~a)" :context-restriction '(:fragment))
 (:name 'noise-1 :in-args '((i 'all-floats)) :output-type :float :transform "noise1(~a)" :context-restriction '((:330)))
 (:name 'noise-2 :in-args '((i 'all-floats)) :output-type :vec2 :transform "noise2(~a)" :context-restriction '((:330)))
 (:name 'noise-3 :in-args '((i 'all-floats)) :output-type :vec2 :transform "noise3(~a)" :context-restriction '((:330)))
 (:name 'noise-4 :in-args '((i 'all-floats)) :output-type :vec2 :transform "noise4(~a)" :context-restriction '((:330)))
 (:name 'incf :in-args '((x (float-and-int nil nil))) :output-type 0 :transform "(~a++)" :context-restriction '((:330)))
 (:name 'decf :in-args '((x (float-and-int nil nil))) :output-type 0 :transform "(~a--)" :context-restriction '((:330)))
 (:name '++ :in-args '((x (float-and-int nil nil))) :output-type 0 :transform "(++~a)" :context-restriction '((:330)))
 (:name '-- :in-args '((x (float-and-int nil nil))) :output-type 0 :transform "(--~a)" :context-restriction '((:330)))
 (:name '! :in-args '((a (:bool nil))) :output-type '(:bool nil) :transform "(! ~a)" :context-restriction '((:330)))
 (:name '~ :in-args '((a ((:int :uint :ivec2 :ivec3 :ivec4)  nil))) :output-type '(0 nil) :transform "(~ ~a)" :context-restriction '((:330)))
 (:name 'b-all :in-args '((x 'v-bvector) :output-type :bool :transform "all(~a)" :context-restriction '((:330)))))
