;;non-matching
'((:name pow :in-args ((x all-floats) (y all-floats)) :output-type 0 :transform "pow(~a, ~a)" :context-restriction ((:330)))
  (:name mod :in-args ((x all-floats) (y all-floats)) :output-type 0 :transform "mod(~a, ~a)" :context-restriction ((:330)))
  (:name min :in-args ((x all-floats) (y v-float)) :output-type 0 :transform "min(~a, ~a)" :context-restriction ((:330)))
  (:name min :in-args ((x 'all-ints) (y v-int)) :output-type 0 :transform "min(~a, ~a)" :context-restriction ((:330)))
  (:name max :in-args ((x all-floats) (y v-float)) :output-type 0 :transform "max(~a, ~a)" :context-restriction ((:330)))
  (:name max :in-args ((x all-ints) (y v-int)) :output-type 0 :transform "max(~a, ~a)" :context-restriction ((:330)))

  (:name clamp :in-args ((x all-floats) (min-val v-float) (max-val v-float)) :output-type 0 :transform "clamp(~a, ~a, ~a)" :context-restriction ((:330)))
  (:name clamp :in-args ((x ((v-int v-ivec2 v-ivec3 v-ivec4))) (min-val v-int) (max-val v-int)) :output-type 0 :transform "clamp(~a, ~a, ~a)" :context-restriction ((:330)))
  (:name clamp :in-args ((x ((v-uint v-uvec2 v-uvec3 v-uvec4))) (min-val v-uint) (max-val v-uint)) :output-type 0 :transform "clamp(~a, ~a, ~a)" :context-restriction ((:330)))

  (:name mix :in-args ((x all-floats) (y all-floats) (a ((v-float v-bvec2 v-bvec3 v-bvec4 v-bool)))) :output-type 0 :transform "mix(~a, ~a, ~a)" :context-restriction ((:330)))
  (:name smooth-step :in-args ((edge0 v-float) (edge1 v-float) (x all-floats)) :output-type (2 nil) :transform "smoothstep(~a, ~a, ~a)" :context-restriction ((:330)))
  (:name cross :in-args ((x v-vec3) (y v-vec3)) :output-type v-vec3 :transform "cross(~a, ~a)" :context-restriction ((:330)))
  (:name aref :in-args ((array 'v-array) (index ((v-uint v-int)))) :output-type (:element 0) :transform "~a[~a]" :context-restriction ((:330)))
  (:name aref :in-args ((vector 'v-vector) (index ((v-uint v-int)))) :output-type (:element 0) :transform "~a[~a]" :context-restriction ((:330)))
  (:name matrix-comp-mult :in-args ((i 'v-matrices) (n 'v-matrices) (eta v-float)) :output-type (0 0) :transform "matrixCompMult(~a, ~a)" :context-restriction ((:330)))
  (:name outer-product :in-args ((i v-vec2) (n v-vec2)) :output-type v-mat2 :transform "outerProduct(~a, ~a)")
  (:name outer-product :in-args ((i v-vec3) (n v-vec3)) :output-type v-mat3 :transform "outerProduct(~a, ~a)")
  (:name outer-product :in-args ((i v-vec4) (n v-vec4)) :output-type v-mat4 :transform "outerProduct(~a, ~a)" :context-restriction ((:330)))
  (:name outer-product :in-args ((m v-vec2) (n v-vec3)) :output-type v-mat3x2 :transform "outerProduct(~a, ~a)")
  (:name outer-product :in-args ((m v-vec2) (n v-vec4)) :output-type v-mat4x2 :transform "outerProduct(~a, ~a)")
  (:name outer-product :in-args ((m v-vec3) (n v-vec2)) :output-type v-mat2x3 :transform "outerProduct(~a, ~a)")
  (:name outer-product :in-args ((m v-vec3) (n v-vec4)) :output-type v-mat4x3 :transform "outerProduct(~a, ~a)")
  (:name outer-product :in-args ((m v-vec4) (n v-vec2)) :output-type v-mat2x4 :transform "outerProduct(~a, ~a)")
  (:name outer-product :in-args ((m v-vec4) (n v-vec3)) :output-type v-mat4x3 :transform "outerProduct(~a, ~a)" :context-restriction ((:330)))
  (:name less-than :in-args ((x v-*vec2) (y v-*vec2)) :output-type v-bvec2 :transform "lessThan(~a, ~a)")
  (:name less-than :in-args ((x v-*vec3) (y v-*vec3)) :output-type v-bvec3 :transform "lessThan(~a, ~a)")
  (:name less-than :in-args ((x v-*vec4) (y v-*vec4)) :output-type v-bvec4 :transform "lessThan(~a, ~a)" :context-restriction ((:330)))
  (:name less-than-equal :in-args ((x v-*vec2) (y v-*vec2)) :output-type v-bvec2 :transform "lessThanEqual(~a, ~a)")
  (:name less-than-equal :in-args ((x v-*vec3) (y v-*vec3)) :output-type v-bvec3 :transform "lessThanEqual(~a, ~a)")
  (:name less-than-equal :in-args ((x v-*vec4) (y v-*vec4)) :output-type v-bvec4 :transform "lessThanEqual(~a, ~a)" :context-restriction ((:330)))
  (:name greater-than :in-args ((x v-*vec2) (y v-*vec2)) :output-type v-bvec2 :transform "greaterThan(~a, ~a)")
  (:name greater-than :in-args ((x v-*vec3) (y v-*vec3)) :output-type v-bvec3 :transform "greaterThan(~a, ~a)")
  (:name greater-than :in-args ((x v-*vec4) (y v-*vec4)) :output-type v-bvec4 :transform "greaterThan(~a, ~a)" :context-restriction ((:330)))
  (:name greater-than-equal :in-args ((x v-*vec2) (y v-*vec2)) :output-type v-bvec2 :transform "greaterThanEqual(~a, ~a)")
  (:name greater-than-equal :in-args ((x v-*vec3) (y v-*vec3)) :output-type v-bvec3 :transform "greaterThanEqual(~a, ~a)")
  (:name greater-than-equal :in-args ((x v-*vec4) (y v-*vec4)) :output-type v-bvec4 :transform "greaterThanEqual(~a, ~a)" :context-restriction ((:330)))
  (:name * :in-args ((x ((v-int v-float))) (y ((v-int v-float)))) :output-type 0 :transform "(~a * ~a)" :context-restriction ((:330)))
  (:name * :in-args ((x ((v-int v-float))) (y ((v-vec2 v-vec3 v-vec4 v-ivec2 v-ivec3 v-ivec4 v-mat2 v-mat3 v-mat4 v-mat2x2 v-mat2x3 v-mat2x4 v-mat3x2 v-mat3x3 v-mat3x4 v-mat4x2 v-mat4x3 v-mat4x4)))) :output-type 1 :transform "(~a * ~a)" :context-restriction ((:330)))
  (:name * :in-args ((x ((v-vec2 v-vec3 v-vec4 v-ivec2 v-ivec3 v-ivec4 v-mat2 v-mat3 v-mat4 v-mat2x2 v-mat2x3 v-mat2x4 v-mat3x2 v-mat3x3 v-mat3x4 v-mat4x2 v-mat4x3 v-mat4x4))) (y ((v-int v-float)))) :output-type 0 :transform "(~a * ~a)" :context-restriction ((:330)))
  (:name * :in-args ((x ((v-vec2 v-vec3 v-vec4 v-ivec2 v-ivec3 v-ivec4))) (y ((v-vec2 v-vec3 v-vec4 v-ivec2 v-ivec3 v-ivec4)))) :output-type 0 :transform "(~a * ~a)" :context-restriction ((:330)))
  (:name * :in-args ((x ((v-mat2 v-mat2x2 v-mat2x3 v-mat2x4))) (y ((v-vec2 v-ivec2)))) :output-type 1 :transform "(~a * ~a)" :context-restriction ((:330)))
  (:name * :in-args ((x ((v-mat3 v-mat3x2 v-mat3x3 v-mat3x4))) (y ((v-vec3 v-ivec3)))) :output-type 1 :transform "(~a * ~a)" :context-restriction ((:330)))
  (:name * :in-args ((x ((v-mat4 v-mat4x2 v-mat4x3 v-mat4x4))) (y ((v-vec4 v-ivec4)))) :output-type 1 :transform "(~a * ~a)" :context-restriction ((:330)))
  (:name * :in-args ((x ((v-mat2 v-mat3 v-mat4))) (y ((v-mat2 v-mat3 v-mat4)))) :output-type 1 :transform "(~a * ~a)" :context-restriction ((:330)))
  (:name % :in-args ((x ((v-int v-uint v-ivec2 v-uvec2 v-ivec3 v-uvec3 v-ivec4 v-uvec4))) (y ((v-int v-uint)))) :output-type 0 :transform "(~a % ~a)" :context-restriction ((:330)))
  (:name < :in-args ((x ((v-float v-int))) (y ((v-float v-int)))) :output-type v-bool :transform "(~a < ~a)" :context-restriction ((:330)))
  (:name > :in-args ((x ((v-float v-int))) (y ((v-float v-int)))) :output-type v-bool :transform "(~a > ~a)" :context-restriction ((:330)))
  (:name <= :in-args ((x ((v-float v-int))) (y ((v-float v-int)))) :output-type v-bool :transform "(~a <= ~a)" :context-restriction ((:330)))
  (:name >= :in-args ((x ((v-float v-int))) (y ((v-float v-int)))) :output-type v-bool :transform "(~a >= ~a)" :context-restriction ((:330)))
  (:name == :in-args ((a v-type) (b v-type)) :output-type v-bool :transform "(~a == ~a)" :context-restriction ((:330)))
  (:name != :in-args ((a v-type) (b v-type)) :output-type v-bool :transform "(~a != ~a)" :context-restriction ((:330)))
  (:name << :in-args ((a ((v-int v-uint v-float) nil)) (b ((v-int v-uint v-float) nil))) :output-type 0 :transform "(~a << ~a)" :context-restriction ((:330)))
  (:name << :in-args ((a ((v-ivec2 v-ivec3 v-ivec4 v-uvec2 v-uvec3 v-uvec4) nil)) (b ((v-int v-uint v-float) nil))) :output-type 0 :transform "(~a << ~a)" :context-restriction ((:330)))
  (:name << :in-args ((a ((v-ivec2 v-ivec3 v-ivec4 v-uvec2 v-uvec3 v-uvec4) nil)) (b ((v-ivec2 v-ivec3 v-ivec4 v-uvec2 v-uvec3 v-uvec4) nil))) :output-type 0 :transform "(~a << ~a)" :context-restriction ((:330)))
  (:name >> :in-args ((a ((v-int v-uint v-float) nil)) (b ((v-int v-uint v-float) nil))) :output-type 0 :transform "(~a >> ~a)" :context-restriction ((:330)))
  (:name >> :in-args ((a ((v-ivec2 v-ivec3 v-ivec4 v-uvec2 v-uvec3 v-uvec4) nil)) (b ((v-int v-uint v-float) nil))) :output-type 0 :transform "(~a >> ~a)" :context-restriction ((:330)))
  (:name >> :in-args ((a ((v-ivec2 v-ivec3 v-ivec4 v-uvec2 v-uvec3 v-uvec4) nil)) (b ((v-ivec2 v-ivec3 v-ivec4 v-uvec2 v-uvec3 v-uvec4) nil))) :output-type 0 :transform "(~a >> ~a)" :context-restriction ((:330)))
  (:name && :in-args ((a v-bool) (b v-bool)) :output-type 0 :transform "(~a && ~a)" :context-restriction ((:330)))
  (:name ^^ :in-args ((a v-bool) (b v-bool)) :output-type 0 :transform "(~a && ~a)" :context-restriction ((:330)))
  (:name || :in-args ((a v-bool) (b v-bool)) :output-type 0 :transform "(~a && ~a)" :context-restriction ((:330))))

;;matching
'((:name min :in-args ((x all-floats-and-ints :match) (y all-floats-and-ints :match)) :output-type 0 :transform "min(~a, ~a)" :context-restriction ((:330)))
  (:name max :in-args ((x all-floats-and-ints :match) (y all-floats-and-ints :match)) :output-type 0 :transform "max(~a, ~a)" :context-restriction ((:330)))
  (:name clamp :in-args ((x all-floats-and-ints :match) (min-val all-floats-and-ints :match) (max-val all-floats-and-ints :match)) :output-type 0 :transform "clamp(~a, ~a, ~a)" :context-restriction ((:330)))
  (:name mix :in-args ((x all-floats :match) (y all-floats :match) (a all-floats :match)) :output-type 0 :transform "mix(~a, ~a, ~a)" :context-restriction ((:330)))
  (:name smooth-step :in-args ((edge0 all-floats :match) (edge1 all-floats :match) (x all-floats :match)) :output-type (2 nil) :transform "smoothstep(~a, ~a, ~a)" :context-restriction ((:330)))
  (:name distance :in-args ((p0 all-floats :match) (p1 all-floats :match)) :output-type v-float :transform "distance(~a, ~a)" :context-restriction ((:330)))
  (:name dot :in-args ((x all-floats :match) (y all-floats :match)) :output-type v-float :transform "dot(~a, ~a)" :context-restriction ((:330)))
  (:name setf :in-args ((x (t nil t) :match) (y (t nil nil) :match)) :output-type (0 0) :transform "~a = ~a" :context-restriction ((:330)))
  (:name setf :in-args ((x (t t t) :match) (y (t t nil) :match)) :output-type (0 0) :transform "~a = ~a" :context-restriction ((:330)))
  (:name face-forward :in-args ((n all-floats :match) (i all-floats :match) (nref all-floats :match)) :output-type (0 0) :transform "faceforward(~a, ~a, ~a)" :context-restriction ((:330)))
  (:name reflect :in-args ((i all-floats :match) (n all-floats :match)) :output-type (0 0) :transform "reflect(~a, ~a)" :context-restriction ((:330)))
  (:name refract :in-args ((i all-floats :match) (n all-floats :match) (eta v-float)) :output-type (0 0) :transform "reflect(~a, ~a, ~a)" :context-restriction ((:330)))
  (:name equal :in-args ((x v-*vec2) (y v-*vec2)) :output-type v-bvec2 :transform "equal(~a, ~a)")
  (:name equal :in-args ((x v-*vec3) (y v-*vec3)) :output-type v-bvec3 :transform "equal(~a, ~a)")
  (:name equal :in-args ((x v-*vec4) (y v-*vec4)) :output-type v-bvec4 :transform "equal(~a, ~a)")
  (:name equal :in-args ((x ((v-bvec2 v-bvec3 v-bvec4)) :match) (y ((v-bvec2 v-bvec3 v-bvec4)) :match)) :output-type 0 :transform "equal(~a, ~a)" :context-restriction ((:330)))
  (:name & :in-args ((a ((v-int v-uint v-ivec2 v-ivec3 v-ivec4 v-uvec2 v-uvec3 v-uvec4) nil) :match) (b ((v-int v-uint v-ivec2 v-ivec3 v-ivec4 v-uvec2 v-uvec3 v-uvec4) nil) :match)) :output-type 0 :transform "(~a & ~a)" :context-restriction ((:330)))
  (:name ^ :in-args ((a ((v-int v-uint v-ivec2 v-ivec3 v-ivec4 v-uvec2 v-uvec3 v-uvec4) nil) :match) (b ((v-int v-uint v-ivec2 v-ivec3 v-ivec4 v-uvec2 v-uvec3 v-uvec4) nil) :match)) :output-type 0 :transform "(~a ^ ~a)" :context-restriction ((:330)))
  (:name pipe :in-args ((a ((v-int v-uint v-ivec2 v-ivec3 v-ivec4 v-uvec2 v-uvec3 v-uvec4) nil) :match) (b ((v-int v-uint v-ivec2 v-ivec3 v-ivec4 v-uvec2 v-uvec3 v-uvec4) nil) :match)) :output-type 0 :transform "(~a | ~a)" :context-restriction ((:330))))
