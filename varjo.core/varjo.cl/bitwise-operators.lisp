(in-package :varjo.cl)

(v-def-glsl-template-fun << (x y) "(~a << ~a)" (v-uint v-uint) v-uint :pure t)
(v-def-glsl-template-fun << (x y) "(~a << ~a)" (v-int v-int) v-int :pure t)
(v-def-glsl-template-fun << (x y) "(~a << ~a)" (v-uvec2 v-uvec2) v-uvec2 :pure t)
(v-def-glsl-template-fun << (x y) "(~a << ~a)" (v-uvec3 v-uvec3) v-uvec3 :pure t)
(v-def-glsl-template-fun << (x y) "(~a << ~a)" (v-uvec4 v-uvec4) v-uvec4 :pure t)
(v-def-glsl-template-fun << (x y) "(~a << ~a)" (v-ivec2 v-ivec2) v-ivec2 :pure t)
(v-def-glsl-template-fun << (x y) "(~a << ~a)" (v-ivec3 v-ivec3) v-ivec3 :pure t)
(v-def-glsl-template-fun << (x y) "(~a << ~a)" (v-ivec4 v-ivec4) v-ivec4 :pure t)
(v-def-glsl-template-fun << (x y) "(~a << ~a)" (v-uint v-uvec2) v-uvec2 :pure t)
(v-def-glsl-template-fun << (x y) "(~a << ~a)" (v-uint v-uvec3) v-uvec3 :pure t)
(v-def-glsl-template-fun << (x y) "(~a << ~a)" (v-uint v-uvec4) v-uvec4 :pure t)
(v-def-glsl-template-fun << (x y) "(~a << ~a)" (v-int v-ivec2) v-ivec2 :pure t)
(v-def-glsl-template-fun << (x y) "(~a << ~a)" (v-int v-ivec3) v-ivec3 :pure t)
(v-def-glsl-template-fun << (x y) "(~a << ~a)" (v-int v-ivec4) v-ivec4 :pure t)
(v-def-glsl-template-fun << (x y) "(~a << ~a)" (v-uvec2 v-uint) v-uvec2 :pure t)
(v-def-glsl-template-fun << (x y) "(~a << ~a)" (v-uvec3 v-uint) v-uvec3 :pure t)
(v-def-glsl-template-fun << (x y) "(~a << ~a)" (v-uvec4 v-uint) v-uvec4 :pure t)
(v-def-glsl-template-fun << (x y) "(~a << ~a)" (v-ivec2 v-int) v-ivec2 :pure t)
(v-def-glsl-template-fun << (x y) "(~a << ~a)" (v-ivec3 v-int) v-ivec3 :pure t)
(v-def-glsl-template-fun << (x y) "(~a << ~a)" (v-ivec4 v-int) v-ivec4 :pure t)

(v-def-glsl-template-fun >> (x y) "(~a >> ~a)" (v-uint v-uint) v-uint :pure t)
(v-def-glsl-template-fun >> (x y) "(~a >> ~a)" (v-int v-int) v-int :pure t)
(v-def-glsl-template-fun >> (x y) "(~a >> ~a)" (v-uvec2 v-uvec2) v-uvec2 :pure t)
(v-def-glsl-template-fun >> (x y) "(~a >> ~a)" (v-uvec3 v-uvec3) v-uvec3 :pure t)
(v-def-glsl-template-fun >> (x y) "(~a >> ~a)" (v-uvec4 v-uvec4) v-uvec4 :pure t)
(v-def-glsl-template-fun >> (x y) "(~a >> ~a)" (v-ivec2 v-ivec2) v-ivec2 :pure t)
(v-def-glsl-template-fun >> (x y) "(~a >> ~a)" (v-ivec3 v-ivec3) v-ivec3 :pure t)
(v-def-glsl-template-fun >> (x y) "(~a >> ~a)" (v-ivec4 v-ivec4) v-ivec4 :pure t)
(v-def-glsl-template-fun >> (x y) "(~a >> ~a)" (v-uint v-uvec2) v-uvec2 :pure t)
(v-def-glsl-template-fun >> (x y) "(~a >> ~a)" (v-uint v-uvec3) v-uvec3 :pure t)
(v-def-glsl-template-fun >> (x y) "(~a >> ~a)" (v-uint v-uvec4) v-uvec4 :pure t)
(v-def-glsl-template-fun >> (x y) "(~a >> ~a)" (v-int v-ivec2) v-ivec2 :pure t)
(v-def-glsl-template-fun >> (x y) "(~a >> ~a)" (v-int v-ivec3) v-ivec3 :pure t)
(v-def-glsl-template-fun >> (x y) "(~a >> ~a)" (v-int v-ivec4) v-ivec4 :pure t)
(v-def-glsl-template-fun >> (x y) "(~a >> ~a)" (v-uvec2 v-uint) v-uvec2 :pure t)
(v-def-glsl-template-fun >> (x y) "(~a >> ~a)" (v-uvec3 v-uint) v-uvec3 :pure t)
(v-def-glsl-template-fun >> (x y) "(~a >> ~a)" (v-uvec4 v-uint) v-uvec4 :pure t)
(v-def-glsl-template-fun >> (x y) "(~a >> ~a)" (v-ivec2 v-int) v-ivec2 :pure t)
(v-def-glsl-template-fun >> (x y) "(~a >> ~a)" (v-ivec3 v-int) v-ivec3 :pure t)
(v-def-glsl-template-fun >> (x y) "(~a >> ~a)" (v-ivec4 v-int) v-ivec4 :pure t)


(v-def-glsl-template-fun bit-and (x y) "(~a & ~a)" (v-int v-int) v-int :pure t)
(v-def-glsl-template-fun bit-and (x y) "(~a & ~a)" (v-int v-ivec2) v-ivec2 :pure t)
(v-def-glsl-template-fun bit-and (x y) "(~a & ~a)" (v-int v-ivec3) v-ivec3 :pure t)
(v-def-glsl-template-fun bit-and (x y) "(~a & ~a)" (v-int v-ivec4) v-ivec4 :pure t)
(v-def-glsl-template-fun bit-and (x y) "(~a & ~a)" (v-ivec2 v-int) v-ivec2 :pure t)
(v-def-glsl-template-fun bit-and (x y) "(~a & ~a)" (v-ivec2 v-ivec2) v-ivec2 :pure t)
(v-def-glsl-template-fun bit-and (x y) "(~a & ~a)" (v-ivec3 v-int) v-ivec3 :pure t)
(v-def-glsl-template-fun bit-and (x y) "(~a & ~a)" (v-ivec3 v-ivec3) v-ivec3 :pure t)
(v-def-glsl-template-fun bit-and (x y) "(~a & ~a)" (v-ivec4 v-int) v-ivec4 :pure t)
(v-def-glsl-template-fun bit-and (x y) "(~a & ~a)" (v-ivec4 v-ivec4) v-ivec4 :pure t)
(v-def-glsl-template-fun bit-and (x y) "(~a & ~a)" (v-uint v-uint) v-uint :pure t)
(v-def-glsl-template-fun bit-and (x y) "(~a & ~a)" (v-uint v-uvec2) v-uvec2 :pure t)
(v-def-glsl-template-fun bit-and (x y) "(~a & ~a)" (v-uint v-uvec3) v-uvec3 :pure t)
(v-def-glsl-template-fun bit-and (x y) "(~a & ~a)" (v-uint v-uvec4) v-uvec4 :pure t)
(v-def-glsl-template-fun bit-and (x y) "(~a & ~a)" (v-uvec2 v-uint) v-uvec2 :pure t)
(v-def-glsl-template-fun bit-and (x y) "(~a & ~a)" (v-uvec2 v-uvec2) v-uvec2 :pure t)
(v-def-glsl-template-fun bit-and (x y) "(~a & ~a)" (v-uvec3 v-uint) v-uvec3 :pure t)
(v-def-glsl-template-fun bit-and (x y) "(~a & ~a)" (v-uvec3 v-uvec3) v-uvec3 :pure t)
(v-def-glsl-template-fun bit-and (x y) "(~a & ~a)" (v-uvec4 v-uint) v-uvec4 :pure t)
(v-def-glsl-template-fun bit-and (x y) "(~a & ~a)" (v-uvec4 v-uvec4) v-uvec4 :pure t)

(v-def-glsl-template-fun bit-ior (x y) "(~a | ~a)" (v-int v-int) v-int :pure t)
(v-def-glsl-template-fun bit-ior (x y) "(~a | ~a)" (v-int v-ivec2) v-ivec2 :pure t)
(v-def-glsl-template-fun bit-ior (x y) "(~a | ~a)" (v-int v-ivec3) v-ivec3 :pure t)
(v-def-glsl-template-fun bit-ior (x y) "(~a | ~a)" (v-int v-ivec4) v-ivec4 :pure t)
(v-def-glsl-template-fun bit-ior (x y) "(~a | ~a)" (v-ivec2 v-int) v-ivec2 :pure t)
(v-def-glsl-template-fun bit-ior (x y) "(~a | ~a)" (v-ivec2 v-ivec2) v-ivec2 :pure t)
(v-def-glsl-template-fun bit-ior (x y) "(~a | ~a)" (v-ivec3 v-int) v-ivec3 :pure t)
(v-def-glsl-template-fun bit-ior (x y) "(~a | ~a)" (v-ivec3 v-ivec3) v-ivec3 :pure t)
(v-def-glsl-template-fun bit-ior (x y) "(~a | ~a)" (v-ivec4 v-int) v-ivec4 :pure t)
(v-def-glsl-template-fun bit-ior (x y) "(~a | ~a)" (v-ivec4 v-ivec4) v-ivec4 :pure t)
(v-def-glsl-template-fun bit-ior (x y) "(~a | ~a)" (v-uint v-uint) v-uint :pure t)
(v-def-glsl-template-fun bit-ior (x y) "(~a | ~a)" (v-uint v-uvec2) v-uvec2 :pure t)
(v-def-glsl-template-fun bit-ior (x y) "(~a | ~a)" (v-uint v-uvec3) v-uvec3 :pure t)
(v-def-glsl-template-fun bit-ior (x y) "(~a | ~a)" (v-uint v-uvec4) v-uvec4 :pure t)
(v-def-glsl-template-fun bit-ior (x y) "(~a | ~a)" (v-uvec2 v-uint) v-uvec2 :pure t)
(v-def-glsl-template-fun bit-ior (x y) "(~a | ~a)" (v-uvec2 v-uvec2) v-uvec2 :pure t)
(v-def-glsl-template-fun bit-ior (x y) "(~a | ~a)" (v-uvec3 v-uint) v-uvec3 :pure t)
(v-def-glsl-template-fun bit-ior (x y) "(~a | ~a)" (v-uvec3 v-uvec3) v-uvec3 :pure t)
(v-def-glsl-template-fun bit-ior (x y) "(~a | ~a)" (v-uvec4 v-uint) v-uvec4 :pure t)
(v-def-glsl-template-fun bit-ior (x y) "(~a | ~a)" (v-uvec4 v-uvec4) v-uvec4 :pure t)

(v-def-glsl-template-fun bit-xor (x y) "(~a ^ ~a)" (v-int v-int) v-int :pure t)
(v-def-glsl-template-fun bit-xor (x y) "(~a ^ ~a)" (v-int v-ivec2) v-ivec2 :pure t)
(v-def-glsl-template-fun bit-xor (x y) "(~a ^ ~a)" (v-int v-ivec3) v-ivec3 :pure t)
(v-def-glsl-template-fun bit-xor (x y) "(~a ^ ~a)" (v-int v-ivec4) v-ivec4 :pure t)
(v-def-glsl-template-fun bit-xor (x y) "(~a ^ ~a)" (v-ivec2 v-int) v-ivec2 :pure t)
(v-def-glsl-template-fun bit-xor (x y) "(~a ^ ~a)" (v-ivec2 v-ivec2) v-ivec2 :pure t)
(v-def-glsl-template-fun bit-xor (x y) "(~a ^ ~a)" (v-ivec3 v-int) v-ivec3 :pure t)
(v-def-glsl-template-fun bit-xor (x y) "(~a ^ ~a)" (v-ivec3 v-ivec3) v-ivec3 :pure t)
(v-def-glsl-template-fun bit-xor (x y) "(~a ^ ~a)" (v-ivec4 v-int) v-ivec4 :pure t)
(v-def-glsl-template-fun bit-xor (x y) "(~a ^ ~a)" (v-ivec4 v-ivec4) v-ivec4 :pure t)
(v-def-glsl-template-fun bit-xor (x y) "(~a ^ ~a)" (v-uint v-uint) v-uint :pure t)
(v-def-glsl-template-fun bit-xor (x y) "(~a ^ ~a)" (v-uint v-uvec2) v-uvec2 :pure t)
(v-def-glsl-template-fun bit-xor (x y) "(~a ^ ~a)" (v-uint v-uvec3) v-uvec3 :pure t)
(v-def-glsl-template-fun bit-xor (x y) "(~a ^ ~a)" (v-uint v-uvec4) v-uvec4 :pure t)
(v-def-glsl-template-fun bit-xor (x y) "(~a ^ ~a)" (v-uvec2 v-uint) v-uvec2 :pure t)
(v-def-glsl-template-fun bit-xor (x y) "(~a ^ ~a)" (v-uvec2 v-uvec2) v-uvec2 :pure t)
(v-def-glsl-template-fun bit-xor (x y) "(~a ^ ~a)" (v-uvec3 v-uint) v-uvec3 :pure t)
(v-def-glsl-template-fun bit-xor (x y) "(~a ^ ~a)" (v-uvec3 v-uvec3) v-uvec3 :pure t)
(v-def-glsl-template-fun bit-xor (x y) "(~a ^ ~a)" (v-uvec4 v-uint) v-uvec4 :pure t)
(v-def-glsl-template-fun bit-xor (x y) "(~a ^ ~a)" (v-uvec4 v-uvec4) v-uvec4 :pure t)
